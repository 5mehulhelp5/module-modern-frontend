<?php
declare(strict_types=1);
/**
 * This file is part of the Obsidian - ModernFrontend project.
 *
 * @license MIT License - See the LICENSE file in the root directory for details.
 * Â© 2024 Jeanmarcos
 */

namespace MageObsidian\ModernFrontend\ViewModel;

use InvalidArgumentException;
use Magento\Framework\App\RequestInterface;
use Magento\Framework\View\Asset\Repository;
use Magento\Framework\View\Element\Block\ArgumentInterface;
use MageObsidian\ModernFrontend\Api\Data\ConfigInterface;
use MageObsidian\ModernFrontend\Model\Config\ConfigProvider;
use RuntimeException;

class ViteResolver implements ArgumentInterface
{
    /**
     * ViteResolver constructor.
     *
     * @param Repository $assetRepository
     * @param RequestInterface $request
     * @param ConfigProvider $configProvider
     */
    public function __construct(
        private readonly Repository $assetRepository,
        private readonly RequestInterface $request,
        private readonly ConfigProvider $configProvider
    ) {
    }

    /**
     * Retrieve url of a view file
     *
     * @param string $fileId
     * @param array $params
     *
     * @return string
     */
    public function getViewFileUrl(string $fileId, array $params = []): string
    {
        $params = array_merge(['_secure' => $this->request->isSecure()], $params);
        return $this->assetRepository->getUrlWithParams($fileId, $params);
    }

    /**
     * Get the full URL for a file generated by Vite.
     *
     * @param string $path Path relative to the Vite generated folder.
     *
     * @return string Full file URL.
     * @throws RuntimeException If Vite path is not configured.
     */
    public function getViteFileUrl(string $path): string
    {
        $vitePath = $this->configProvider->getViteGeneratedPath();
        if (!$vitePath) {
            throw new RuntimeException('Vite generated path is not configured.');
        }
        if (!pathinfo($path, PATHINFO_EXTENSION)) {
            $path .= '.js';
        }
        return $this->getViewFileUrl("{$vitePath}/{$path}");
    }

    /**
     * Get the full URL for a library file.
     *
     * @param string $path Path relative to the library folder.
     *
     * @return string Full file URL.
     */
    public function getViewLibFileUrl(string $path): string
    {
        return $this->getViteFileUrl(ConfigInterface::LIB_PATH . '/' . $path);
    }

    /**
     * Resolve the file path by its name.
     *
     * @param string $name Format: "Vendor::Path" or "Path".
     * @param string|null $defaultStart Default start path if not specified in $name.
     *
     * @return string Full resolved file URL.
     * @throws InvalidArgumentException If the name is empty.
     */
    public function resolvePathByName(string $name, ?string $defaultStart = null): string
    {
        if (empty($name)) {
            throw new InvalidArgumentException('The component name cannot be empty.');
        }

        $nameParts = explode('::', $name);
        $vendor = count($nameParts) === 2 ? $nameParts[0] : ConfigInterface::THEME_FILES_PATH;
        $path = count($nameParts) === 2 ? $nameParts[1] : $nameParts[0];

        if ($defaultStart && !str_starts_with($path, "{$defaultStart}/")) {
            $path = "{$defaultStart}/{$path}";
        }

        return $this->getViteFileUrl("{$vendor}/{$path}");
    }

    /**
     * Resolve the path for a component by its name.
     *
     * @param string $name Component name in the format "Vendor::Component".
     */
    public function resolveComponentPath(string $name): string
    {
        return $this->resolvePathByName($name, ConfigInterface::VUE_COMPONENTS_PATH);
    }

    /**
     * Generates the HTML to load a Vue component dynamically.
     *
     * @param string $componentName Component name in the format "Vendor::Component".
     * @param array $props Properties to pass to the Vue component.
     *
     * @return string HTML code to integrate the Vue component.
     */
    public function renderVueComponent(string $componentName, array $props = []): string
    {
        $componentPath = $this->resolvePathByName($componentName, ConfigInterface::VUE_COMPONENTS_PATH);
        $vueUrl = $this->getViewLibFileUrl('vue');

        // Generate a unique ID for the Vue component's container.
        $uniqueId = 'vue-component-' . uniqid();

        // Convert properties to JSON format for JavaScript.
        $propsJson = json_encode($props, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);

        // Return the HTML and JavaScript needed to mount the Vue component.
        return <<<HTML
            <div id="$uniqueId"></div>
            <script type="module">
                import { createApp } from '$vueUrl';
                import Component from '$componentPath';
                try {
                    createApp(Component, $propsJson).mount('#$uniqueId');
                } catch (error) {
                    console.error('Failed to mount Vue component:', error);
                }
            </script>
        HTML;
    }

    /**
     * Get the configuration provider.
     *
     * @return ConfigProvider Configuration provider.
     */
    public function getConfigProvider(): ConfigProvider
    {
        return $this->configProvider;
    }

    /**
     * Get the full URL for a Heroicons SVG icon.
     *
     * @param string $iconName Icon name.
     * @param string $iconSet Icon set (solid, outline).
     * @param string $size Icon size (16, 20, 24).
     *
     * @return string Full file URL.
     */
    public function getHeroIcon(
        string $iconName,
        string $iconSet = 'solid',
        string $size = '24',
    ): string {
        if (!pathinfo($iconName, PATHINFO_EXTENSION)) {
            $iconName .= '.svg';
        }
        $url = $this->getViewFileUrl("MageObsidian_ModernFrontend::assets/@heroicons/{$size}/{$iconSet}/{$iconName}");
        return <<<HTML
            <svg width="$size" height="$size" mlns="http://www.w3.org/2000/svg">
                <use href="$url#icon"></use>
            </svg>
        HTML;
    }
}
