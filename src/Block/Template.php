<?php
/**
 * This file is part of the MageObsidian - ModernFrontend project.
 *
 * @license MIT License - See the LICENSE file in the root directory for details.
 * Â© 2024 Jeanmarcos
 */

namespace MageObsidian\ModernFrontend\Block;

use MageObsidian\ModernFrontend\Api\Data\ConfigInterface;
use MageObsidian\ModernFrontend\Model\Config\ConfigProvider;
use InvalidArgumentException;
use Magento\Framework\View\Element\Template as MagentoTemplate;
use Magento\Framework\View\Element\Template\Context;
use RuntimeException;

/**
 * Class Template
 * Handles integration of modern frontend frameworks with Magento.
 */
class Template extends MagentoTemplate
{
    private readonly ConfigProvider $configProvider;

    public function __construct(
        Context $context,
        ConfigProvider $configProvider,
        array $data = []
    ) {
        $this->configProvider = $configProvider;
        parent::__construct(
            $context,
            $data
        );
    }

    /**
     * Get the full URL for a file generated by Vite.
     *
     * @param string $path Path relative to the Vite generated folder.
     *
     * @return string Full file URL.
     * @throws RuntimeException If Vite path is not configured.
     */
    public function getViteFileUrl(string $path): string
    {
        $vitePath = $this->configProvider->getViteGeneratedPath();
        if (!$vitePath) {
            throw new RuntimeException('Vite generated path is not configured.');
        }
        if (!pathinfo(
            $path,
            PATHINFO_EXTENSION
        )) {
            $path .= '.js';
        }
        return $this->getViewFileUrl("{$vitePath}/{$path}");
    }

    /**
     * Get the full URL for a library file.
     *
     * @param string $path Path relative to the library folder.
     *
     * @return string Full file URL.
     */
    public function getViewLibFileUrl(string $path): string
    {
        return $this->getViteFileUrl(ConfigInterface::LIB_PATH . '/' . $path);
    }

    /**
     * Resolve the file path by its name.
     *
     * @param string $name Format: "Vendor::Path" or "Path".
     * @param string|null $defaultStart Default start path if not specified in $name.
     *
     * @return string Full resolved file URL.
     * @throws InvalidArgumentException If the name is empty.
     */
    public function resolvePathByName(string $name, ?string $defaultStart = null): string
    {
        if (empty($name)) {
            throw new InvalidArgumentException('The component name cannot be empty.');
        }

        $nameParts = explode(
            '::',
            $name
        );
        $vendor = count($nameParts) === 2 ? $nameParts[0] : ConfigInterface::THEME_FILES_PATH;
        $path = count($nameParts) === 2 ? $nameParts[1] : $nameParts[0];

        if ($defaultStart && !str_starts_with(
                $path,
                "{$defaultStart}/"
            )) {
            $path = "{$defaultStart}/{$path}";
        }

        return $this->getViteFileUrl("{$vendor}/{$path}");
    }

    /**
     * Generates the HTML to load a Vue component dynamically.
     *
     * @param string $componentName Component name in the format "Vendor::Component".
     * @param array $props Properties to pass to the Vue component.
     *
     * @return string HTML code to integrate the Vue component.
     */
    public function renderVueComponent(string $componentName, array $props = []): string
    {
        $componentPath = $this->resolvePathByName(
            $componentName,
            ConfigInterface::VUE_COMPONENTS_PATH
        );
        $vueUrl = $this->getViewLibFileUrl('vue');

        // Generate a unique ID for the Vue component's container.
        $uniqueId = 'vue-component-' . uniqid();

        // Convert properties to JSON format for JavaScript.
        $propsJson = json_encode(
            $props,
            JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP
        );

        // Return the HTML and JavaScript needed to mount the Vue component.
        return <<<HTML
            <div id="$uniqueId"></div>
            <script type="module">
                import { createApp } from '$vueUrl';
                import Component from '$componentPath';

                // Create and mount the Vue app with the component and props.
                try {
                    createApp(Component, $propsJson).mount('#$uniqueId');
                } catch (error) {
                    console.error('Failed to mount Vue component:', error);
                }
            </script>
        HTML;
    }

    public function getConfigProvider(): ConfigProvider
    {
        return $this->configProvider;
    }
}
