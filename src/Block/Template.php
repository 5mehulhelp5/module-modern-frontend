<?php
/**
 * This file is part of the MageObsidian - ModernFrontend project.
 *
 * @license MIT License - See the LICENSE file in the root directory for details.
 * Â© 2024 Jeanmarcos
 */

namespace MageObsidian\ModernFrontend\Block;

use Magento\Framework\Exception\LocalizedException;
use MageObsidian\ModernFrontend\Model\Config\ConfigProvider;
use InvalidArgumentException;
use Magento\Framework\View\Element\Template as MagentoTemplate;
use Magento\Framework\View\Element\Template\Context;
use MageObsidian\ModernFrontend\ViewModel\ViteResolver;
use RuntimeException;

/**
 * Class Template
 * Handles integration of modern frontend frameworks with Magento.
 */
class Template extends MagentoTemplate
{
    /**
     * Template constructor.
     *
     * @param Context $context
     * @param ViteResolver $viteResolver
     * @param array $data
     */
    public function __construct(
        Context $context,
        private readonly ViteResolver $viteResolver,
        array $data = []
    ) {
        parent::__construct($context, $data);
    }

    /**
     * Retrieve url of a view file
     *
     * @param string $fileId
     * @param array $params
     *
     * @return string
     */
    public function getViewFileUrl($fileId, array $params = []): string
    {
        return $this->viteResolver->getViewFileUrl($fileId, $params);
    }

    /**
     * Get the full URL for a file generated by Vite.
     *
     * @param string $path Path relative to the Vite generated folder.
     *
     * @return string Full file URL.
     * @throws RuntimeException If Vite path is not configured.
     */
    public function getViteFileUrl(string $path): string
    {
        return $this->viteResolver->getViteFileUrl($path);
    }

    /**
     * Get the full URL for a library file.
     *
     * @param string $path Path relative to the library folder.
     *
     * @return string Full file URL.
     */
    public function getViewLibFileUrl(string $path): string
    {
        return $this->viteResolver->getViewLibFileUrl($path);
    }

    /**
     * Resolve the file path by its name.
     *
     * @param string $name Format: "Vendor::Path" or "Path".
     * @param string|null $defaultStart Default start path if not specified in $name.
     *
     * @return string Full resolved file URL.
     * @throws InvalidArgumentException If the name is empty.
     */
    public function resolvePathByName(string $name, ?string $defaultStart = null): string
    {
        return $this->viteResolver->resolvePathByName($name, $defaultStart);
    }

    /**
     * Resolve the path for a component by its name.
     *
     * @param string $name Component name in the format "Vendor::Component".
     */
    public function resolveComponentPath(string $name): string
    {
        return $this->viteResolver->resolveComponentPath($name);
    }

    /**
     * Generates the HTML to load a Vue component dynamically.
     *
     * @param string $componentName Component name in the format "Vendor::Component".
     * @param array $props Properties to pass to the Vue component.
     *
     * @return string HTML code to integrate the Vue component.
     */
    public function renderVueComponent(string $componentName, array $props = []): string
    {
        return $this->viteResolver->renderVueComponent($componentName, $props);
    }

    /**
     * Get the configuration provider.
     *
     * @return ConfigProvider Configuration provider.
     */
    public function getConfigProvider(): ConfigProvider
    {
        return $this->viteResolver->getConfigProvider();
    }

    /**
     * Get the full URL for a Heroicons SVG icon.
     *
     * @param string $iconName Icon name.
     * @param string $iconSet Icon set (solid, outline).
     * @param string $size Icon size (16, 20, 24).
     *
     * @return string Full file URL.
     */
    public function getHeroIcon(
        string $iconName,
        string $iconSet = 'solid',
        string $size = '24',
    ): string {
        return $this->viteResolver->getHeroIcon($iconName, $iconSet, $size);
    }

    /**
     * Get Child Html with Exclusions
     *
     * @param string $alias
     * @param bool $useCache
     * @param array $excludedBlocks
     *
     * @return string
     * @throws LocalizedException
     */
    public function getChildHtmlWithExclusions(
        string $alias = '',
        bool $useCache = true,
        array $excludedBlocks = []
    ): string {
        $layout = $this->getLayout();
        if (!$layout) {
            return '';
        }
        $name = $this->getNameInLayout();
        $out = '';
        if ($alias) {
            $childName = $layout->getChildName($name, $alias);
            if ($childName && !in_array($childName, $excludedBlocks, true)) {
                $out = $layout->renderElement($childName, $useCache);
            }
        } else {
            foreach ($layout->getChildNames($name) as $child) {
                if (!in_array($child, $excludedBlocks, true)) {
                    $out .= $layout->renderElement($child, $useCache);
                }
            }
        }

        return $out;
    }
}
